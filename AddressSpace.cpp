#include <Arduino.h>
#include <HardwareSerial.h>
#include "AddressSpace.h"

const uint8_t rom[0x100] = {0xd8, 0x58, 0xa0, 0x7f, 0x8c, 0x12, 0xd0, 0xa9, 0xa7, 0x8d, 0x11, 0xd0, 0x8d, 0x13, 0xd0, 0xc9, 0xdf, 0xf0, 0x13, 0xc9, 0x9b, 0xf0, 0x3, 0xc8, 0x10, 0xf, 0xa9, 0xdc, 0x20, 0xef, 0xff, 0xa9, 0x8d, 0x20, 0xef, 0xff, 0xa0, 0x1, 0x88, 0x30, 0xf6, 0xad, 0x11, 0xd0, 0x10, 0xfb, 0xad, 0x10, 0xd0, 0x99, 0x0, 0x2, 0x20, 0xef, 0xff, 0xc9, 0x8d, 0xd0, 0xd4, 0xa0, 0xff, 0xa9, 0x0, 0xaa, 0xa, 0x85, 0x2b, 0xc8, 0xb9, 0x0, 0x2, 0xc9, 0x8d, 0xf0, 0xd4, 0xc9, 0xae, 0x90, 0xf4, 0xf0, 0xf0, 0xc9, 0xba, 0xf0, 0xeb, 0xc9, 0xd2, 0xf0, 0x3b, 0x86, 0x28, 0x86, 0x29, 0x84, 0x2a, 0xb9, 0x0, 0x2, 0x49, 0xb0, 0xc9, 0xa, 0x90, 0x6, 0x69, 0x88, 0xc9, 0xfa, 0x90, 0x11, 0xa, 0xa, 0xa, 0xa, 0xa2, 0x4, 0xa, 0x26, 0x28, 0x26, 0x29, 0xca, 0xd0, 0xf8, 0xc8, 0xd0, 0xe0, 0xc4, 0x2a, 0xf0, 0x97, 0x24, 0x2b, 0x50, 0x10, 0xa5, 0x28, 0x81, 0x26, 0xe6, 0x26, 0xd0, 0xb5, 0xe6, 0x27, 0x4c, 0x44, 0xff, 0x6c, 0x24, 0x0, 0x30, 0x2b, 0xa2, 0x2, 0xb5, 0x27, 0x95, 0x25, 0x95, 0x23, 0xca, 0xd0, 0xf7, 0xd0, 0x14, 0xa9, 0x8d, 0x20, 0xef, 0xff, 0xa5, 0x25, 0x20, 0xdc, 0xff, 0xa5, 0x24, 0x20, 0xdc, 0xff, 0xa9, 0xba, 0x20, 0xef, 0xff, 0xa9, 0xa0, 0x20, 0xef, 0xff, 0xa1, 0x24, 0x20, 0xdc, 0xff, 0x86, 0x2b, 0xa5, 0x24, 0xc5, 0x28, 0xa5, 0x25, 0xe5, 0x29, 0xb0, 0xc1, 0xe6, 0x24, 0xd0, 0x2, 0xe6, 0x25, 0xa5, 0x24, 0x29, 0x7, 0x10, 0xc8, 0x48, 0x4a, 0x4a, 0x4a, 0x4a, 0x20, 0xe5, 0xff, 0x68, 0x29, 0xf, 0x9, 0xb0, 0xc9, 0xba, 0x90, 0x2, 0x69, 0x6, 0x2c, 0x12, 0xd0, 0x30, 0xfb, 0x8d, 0x12, 0xd0, 0x60, 0x0, 0x0, 0x0, 0xf, 0x0, 0xff, 0x0, 0x0 };

uint8_t AddressSpace::Read(uint16_t addr) {
  uint8_t val;
  switch (addr >> 8) {
    default:
      // nothing in the address space, just return zero.
      return 0x00;
    case 0x00:
    case 0x01:
    case 0x02:
    case 0x03:
    case 0x04:
    case 0x05:
    case 0x06:
    case 0x07:
    case 0x08:
    case 0x09:
    case 0x0a:
    case 0x0b:
    case 0x0c:
    case 0x0d:
    case 0x0e:
    case 0x0f:
      printAddr(addr, 0, 0);
      val = ram[addr];
      printByte(val,5 ,0);
      return val;
    case 0xd0:
      // fake 6821
      printAddr(addr, 8, 0);
      switch (addr & 0xff) {
        case 0x10:
          val = Serial.read() | 0x80;
          break;
        case 0x11:
          if (Serial.available() > 0) {
            val = 0x80;
          } else {
            val = 0x00;
          }
          break;
        default:
          val = pia[addr & 0xff];
      }
      printByte(val, 14, 0);
      return val;
    case 0xff:
      printAddr(addr, 8, 0);
      val = rom[addr & 0xff];
      printByte(val, 14, 0);
      return val;
  }
}

void AddressSpace::Write(uint16_t addr, uint8_t val) {
  switch (addr >> 8) {
    default:
      // nothing in the address space ignore the write;
      break;
    case 0x00:
    case 0x01:
    case 0x02:
    case 0x03:
    case 0x04:
    case 0x05:
    case 0x06:
    case 0x07:
    case 0x08:
    case 0x09:
    case 0x0a:
    case 0x0b:
    case 0x0c:
    case 0x0d:
    case 0x0e:
    case 0x0f:
      printAddr(addr, 0, 1);
      printByte(val, 5, 1);
      ram[addr] = val;
      break;
    case 0xd0:
      printAddr(addr, 8, 1);
      printByte(val, 14, 1);
      switch (addr & 0xff) {
        default:
          pia[addr & 0xff] = val;
          break;
        case 0x12:
          Serial.write(val & 0x7f);
          break;
      }
      break;
  }
}
